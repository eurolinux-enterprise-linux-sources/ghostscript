diff -up ghostscript-8.70/jbig2dec/jbig2_generic.c.TPGDON ghostscript-8.70/jbig2dec/jbig2_generic.c
--- ghostscript-8.70/jbig2dec/jbig2_generic.c.TPGDON	2013-04-12 15:32:33.051666716 +0100
+++ ghostscript-8.70/jbig2dec/jbig2_generic.c	2013-04-12 15:33:19.440854700 +0100
@@ -466,6 +466,241 @@ jbig2_decode_generic_template3_unopt(Jbi
   return 0;
 }
 
+static void
+copy_prev_row(Jbig2Image *image, int row)
+{
+  if (!row) {
+    /* no previous row */
+    memset( image->data, 0, image->stride );
+  } else {
+    /* duplicate data from the previous row */
+    uint8_t *src = image->data + (row - 1) * image->stride;
+    memcpy( src + image->stride, src, image->stride );
+  }
+}
+
+static int
+jbig2_decode_generic_template0_TPGDON(Jbig2Ctx *ctx,
+				Jbig2Segment *segment,
+				const Jbig2GenericRegionParams *params, 
+				Jbig2ArithState *as,
+				Jbig2Image *image,
+				Jbig2ArithCx *GB_stats)
+{
+  const int GBW = image->width;
+  const int GBH = image->height;
+  uint32_t CONTEXT;
+  int x, y;
+  bool bit;
+  int LTP = 0;
+
+  for (y = 0; y < GBH; y++)
+  {
+    bit = jbig2_arith_decode(as, &GB_stats[0x9B25]);
+    if (bit < 0)
+      return -1;
+    LTP ^= bit;
+    if (!LTP) {
+      for (x = 0; x < GBW; x++) {
+        CONTEXT  = jbig2_image_get_pixel(image, x - 1, y);
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y) << 1;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 3, y) << 2;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 4, y) << 3;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[0],
+					y + params->gbat[1]) << 4;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 2, y - 1) << 5;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 1) << 6;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 1) << 7;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 1) << 8;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y - 1) << 9;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[2],
+					y + params->gbat[3]) << 10;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[4],
+					y + params->gbat[5]) << 11;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 2) << 12;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 2) << 13;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 2) << 14;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[6],
+					y + params->gbat[7]) << 15;
+        bit = jbig2_arith_decode(as, &GB_stats[CONTEXT]);
+        if (bit < 0)
+	  return -1;
+        jbig2_image_set_pixel(image, x, y, bit);
+      }
+    } else {
+      copy_prev_row(image, y);
+    }
+  }
+
+  return 0;
+}
+
+static int
+jbig2_decode_generic_template1_TPGDON(Jbig2Ctx *ctx, 
+				Jbig2Segment *segment,
+				const Jbig2GenericRegionParams *params, 
+				Jbig2ArithState *as,
+				Jbig2Image *image,
+				Jbig2ArithCx *GB_stats)
+{
+  const int GBW = image->width;
+  const int GBH = image->height;
+  uint32_t CONTEXT;
+  int x, y;
+  bool bit;
+  int LTP = 0;
+
+  for (y = 0; y < GBH; y++) {
+    bit = jbig2_arith_decode(as, &GB_stats[0x0795]);
+    if (bit < 0)
+      return -1;
+    LTP ^= bit;
+    if (!LTP) {
+      for (x = 0; x < GBW; x++) {
+        CONTEXT  = jbig2_image_get_pixel(image, x - 1, y);
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y) << 1;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 3, y) << 2;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[0],
+					y + params->gbat[1]) << 3;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 2, y - 1) << 4;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 1) << 5;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 1) << 6;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 1) << 7;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y - 1) << 8;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 2, y - 2) << 9;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 2) << 10;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 2) << 11;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 2) << 12;
+        bit = jbig2_arith_decode(as, &GB_stats[CONTEXT]);
+        if (bit < 0)
+	  return -1;
+        jbig2_image_set_pixel(image, x, y, bit);
+      }
+    } else {
+      copy_prev_row(image, y);
+    }
+  }
+
+  return 0;
+}
+
+static int
+jbig2_decode_generic_template2_TPGDON(Jbig2Ctx *ctx, 
+				Jbig2Segment *segment,
+				const Jbig2GenericRegionParams *params,
+				Jbig2ArithState *as,
+				Jbig2Image *image,
+				Jbig2ArithCx *GB_stats)
+{
+  const int GBW = image->width;
+  const int GBH = image->height;
+  uint32_t CONTEXT;
+  int x, y;
+  bool bit;
+  int LTP = 0;
+
+  for (y = 0; y < GBH; y++) {
+    bit = jbig2_arith_decode(as, &GB_stats[0xE5]);
+    if (bit < 0)
+      return -1;
+    LTP ^= bit;
+    if (!LTP) {
+      for (x = 0; x < GBW; x++) {
+        CONTEXT  = jbig2_image_get_pixel(image, x - 1, y);
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y) << 1;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[0],
+					y + params->gbat[1]) << 2;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 1) << 3;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 1) << 4;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 1) << 5;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y - 1) << 6;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 2) << 7;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 2) << 8;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 2) << 9;
+        bit = jbig2_arith_decode(as, &GB_stats[CONTEXT]);
+        if (bit < 0)
+	  return -1;
+        jbig2_image_set_pixel(image, x, y, bit);
+      }
+    } else {
+      copy_prev_row(image, y);
+    }
+  }
+
+  return 0;
+}
+
+static int
+jbig2_decode_generic_template3_TPGDON(Jbig2Ctx *ctx, 
+				Jbig2Segment *segment,
+				const Jbig2GenericRegionParams *params,
+				Jbig2ArithState *as,
+				Jbig2Image *image,
+				Jbig2ArithCx *GB_stats)
+{
+  const int GBW = image->width;
+  const int GBH = image->height;
+  uint32_t CONTEXT;
+  int x, y;
+  bool bit;
+  int LTP = 0;
+
+  for (y = 0; y < GBH; y++) {
+    bit = jbig2_arith_decode(as, &GB_stats[0x0195]);
+    if (bit < 0)
+      return -1;
+    LTP ^= bit;
+    if (!LTP) {
+      for (x = 0; x < GBW; x++) {
+        CONTEXT  = jbig2_image_get_pixel(image, x - 1, y);
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y) << 1;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 3, y) << 2;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 4, y) << 3;
+        CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[0],
+					y + params->gbat[1]) << 4;
+        CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 1) << 5;
+        CONTEXT |= jbig2_image_get_pixel(image, x    , y - 1) << 6;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 1) << 7;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 2, y - 1) << 8;
+        CONTEXT |= jbig2_image_get_pixel(image, x - 3, y - 1) << 9;
+        bit = jbig2_arith_decode(as, &GB_stats[CONTEXT]);
+        if (bit < 0)
+	  return -1;
+        jbig2_image_set_pixel(image, x, y, bit);
+      }
+    } else {
+      copy_prev_row(image, y);
+    }
+  }
+
+  return 0;
+}
+
+static int
+jbig2_decode_generic_region_TPGDON(Jbig2Ctx *ctx,
+				Jbig2Segment *segment,
+				const Jbig2GenericRegionParams *params, 
+				Jbig2ArithState *as,
+				Jbig2Image *image,
+				Jbig2ArithCx *GB_stats)
+{
+  switch (params->GBTEMPLATE) {
+    case 0:
+      return jbig2_decode_generic_template0_TPGDON(ctx, segment, 
+			params, as, image, GB_stats);
+    case 1:
+      return jbig2_decode_generic_template1_TPGDON(ctx, segment, 
+			params, as, image, GB_stats);
+    case 2:
+      return jbig2_decode_generic_template2_TPGDON(ctx, segment, 
+			params, as, image, GB_stats);
+    case 3:
+      return jbig2_decode_generic_template3_TPGDON(ctx, segment, 
+			params, as, image, GB_stats);
+  }
+
+  return -1;
+}
 
 /**
  * jbig2_decode_generic_region: Decode a generic region.
@@ -494,6 +729,10 @@ jbig2_decode_generic_region(Jbig2Ctx *ct
 {
   const int8_t *gbat = params->gbat;
 
+  if (!params->MMR && params->TPGDON) 
+     return jbig2_decode_generic_region_TPGDON(ctx, segment, params, 
+		as, image, GB_stats);
+
   if (!params->MMR && params->GBTEMPLATE == 0) {
     if (gbat[0] == +3 && gbat[1] == -1 &&
         gbat[2] == -3 && gbat[3] == -1 &&
